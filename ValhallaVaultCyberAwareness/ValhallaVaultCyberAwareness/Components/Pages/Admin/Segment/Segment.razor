@rendermode InteractiveServer
@inject AdminManager manager

<ConfirmDialog @ref="dialog"></ConfirmDialog>


<div class="card">
    <div class="card-body">

        <h5 class="card-title">@CurrentSegment.Name</h5>
        @if(CurrentSegment.Category != null)
        {
            <h5 class="card-text">Category: @CurrentSegment.Category.Name</h5>
        }
        <p class="card-text">@CurrentSegment.Description</p>
        <button class="btn btn-info" @onclick="Toggle">Edit</button>
        <button class="btn btn-danger" @onclick="async () => await DeleteSegment()">Delete</button>

        @if(Hide == false)
        {
            <EditSegmentForm Categories="Categories" segment ="CurrentSegment" OnUpdate="ToggleHide"></EditSegmentForm>
        }

     </div>
</div>
@code {
    [Parameter]
    public SegmentModel CurrentSegment { get; set; }

    [Parameter]
    public List<CategoryModel> Categories { get; set; } = new();

    async Task DeleteSegment()
    {
        var confirmation = await dialog.ShowAsync(

            title: "Are you sure you want to delete this segment?",
            message1: "This item will be deleted permanently. You can't undo this action."

        );
        if (confirmation)
        {
            await manager._segmentRepository.RemoveSegmentAsync(CurrentSegment.Id);
            OnDelete.Invoke();
        }
    }

    // Action that tells the parent component to update when invoked
    [Parameter]
    public Action? OnDelete { get; set; }

    private ConfirmDialog dialog;

    private bool Hide { get; set; } = true;

    private void Toggle()
    {
        Hide = !Hide;
    }

    private void ToggleHide()
    {
        Hide = true;
        StateHasChanged();
    }
}
