@using ValhallaVaultCyberAwareness.Client.ViewModels
@inject AdminManager manager
@inject NavigationManager navManager

<ConfirmDialog @ref="dialog"></ConfirmDialog>

<h3>Create a segment: </h3>

<EditForm Model="segment" OnValidSubmit="HandleSubmit" FormName="name" class="card w-50">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" role="alert" />    
    <label>
        Name
    </label>

    <InputText @bind-Value="segment.Name"></InputText>

    <label>
        Description
    </label>

    <InputText @bind-Value="segment.Description"></InputText>

    <label>
        Category:
    </label>

    <InputSelect @bind-Value="segment.CategoryId">
        <option>None</option>
        @foreach (var category in Categories)
        {
            <option value="@category.Id">@category.Name</option>
        }
    </InputSelect>

    <br />
    <input class="btn btn-info" type="submit" value="Create a segment" />
    @if(String.IsNullOrEmpty(ErrorMessage) == false)
    {
        <p class="text-danger" role="alert">@ErrorMessage</p>
    }
</EditForm>


@code {
    [SupplyParameterFromForm]
    public SegmentViewModel segment { get; set; } = new();

    [Parameter]
    public List<CategoryModel> Categories { get; set; } = new();

    private ConfirmDialog dialog;

    private string? ErrorMessage;

    // Action that tells the parent component to update when invoked
    [Parameter]
    public Action? OnAdd { get; set; }

    // protected override async Task OnInitializedAsync()
    // {
    //     Categories = await manager._categoryRepository.GetAllCategoriesAsync();
    // }

    private async Task HandleSubmit()
    {

        var confirmation = await dialog.ShowAsync(

           title: "Are you sure you want to add?",
           message1: "Y/N"
       );

        if (confirmation)
        {
            SegmentModel newSegment = new()
                {
                    Name = segment.Name,
                    Description = segment.Description,
                    CategoryId = segment.CategoryId
                };
            try
            {
                await manager._segmentRepository.AddSegmentAsync(newSegment);
                navManager.NavigateTo("Admin/Segment/SegmentPage", true);
            }
            catch (Exception ex)
            {
                ErrorMessage = ex.Message;
            }
        }
    }

}
