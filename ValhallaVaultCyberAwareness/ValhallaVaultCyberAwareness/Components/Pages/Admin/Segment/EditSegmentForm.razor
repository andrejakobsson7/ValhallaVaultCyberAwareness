@using ValhallaVaultCyberAwareness.Client.ViewModels
@inject AdminManager manager

<ConfirmDialog @ref="dialog"></ConfirmDialog>

<EditForm Model="segmentVM" OnValidSubmit="HandleSubmit" FormName="name" class="card w-50">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" role="alert" />
    <label>
        Name
    </label>

    <InputText @bind-Value="segmentVM.Name"></InputText>

    <label>
        Description
    </label>

    <InputText @bind-Value="segmentVM.Description"></InputText>

    <label>
        Category:
    </label>

    <InputSelect @bind-Value="segmentVM.CategoryId">
        @foreach (var category in Categories)
        {
            <option value="@category.Id">@category.Name</option>
        }
    </InputSelect>

    <br />
    <input class="btn btn-info" type="submit" value="Update" />
    @if (String.IsNullOrEmpty(ErrorMessage) == false)
    {
        <p class="text-danger" role="alert">@ErrorMessage</p>
    }

</EditForm>


@code {
    [Parameter]
    public SegmentModel segment { get; set; } = new();

    private SegmentViewModel segmentVM { get; set; } = new();

    private string? ErrorMessage;

    [Parameter]
    public List<CategoryModel> Categories { get; set; } = new();

    private ConfirmDialog dialog;

    // Action that tells the parent component to update when invoked
    [Parameter]
    public Action? OnUpdate { get; set; }

    protected override async Task OnInitializedAsync()
    {
        segmentVM = new(segment);
    }

    private async Task HandleSubmit()
    {

        var confirmation = await dialog.ShowAsync(

           title: "Are you sure you want to update this segment?",
           message1: "Y/N"
       );

        if (confirmation)
        {
            segment.Name = segmentVM.Name;
            segment.Description = segmentVM.Description;
            segment.CategoryId = segmentVM.CategoryId;
            try
            {
                await manager._segmentRepository.UpdateSegmentAsync(segment);
                OnUpdate?.Invoke();
            }
            catch (Exception ex)
            {
                ErrorMessage = ex.Message;
            }

        }

    }
}
