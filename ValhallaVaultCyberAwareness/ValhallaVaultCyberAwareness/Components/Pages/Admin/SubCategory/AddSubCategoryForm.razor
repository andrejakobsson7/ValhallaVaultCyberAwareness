@using ValhallaVaultCyberAwareness.Client.ViewModels
@inject AdminManager manager
@inject NavigationManager navManager

<ConfirmDialog @ref="dialog"></ConfirmDialog>

<h3>Create a SubCategory: </h3>

<EditForm Model="subcategory" OnValidSubmit=" async ()=> await HandleSubmit()" FormName="name" class="card w-50">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" role="alert" />
    <label>
        Name:
    </label>

    <InputText @bind-Value="subcategory.Name"></InputText>

    <label>
        Description:
    </label>

    <InputText @bind-Value="subcategory.Description"></InputText>

    <label>
        Segment:
    </label>

    <InputSelect @bind-Value="subcategory.SegmentId">
        <option>None</option>
        @foreach (var segment in Segments)
        {
            <option value="@segment.Id">@segment.Name</option>
        }
    </InputSelect>

    <br />

    <input class="btn btn-info" type="submit" value="Create subcategory" />
    @if (String.IsNullOrEmpty(ErrorMessage) == false)
    {
        <p class="text-danger" role="alert">@ErrorMessage</p>
    }

</EditForm>


@code {
    [SupplyParameterFromForm]
    public SubCategoryViewModel subcategory { get; set; } = new();

    private List<SegmentModel> Segments { get; set; } = new();

    private ConfirmDialog dialog;

    private string? ErrorMessage;


    // Action that tells the parent component to update when invoked
    [Parameter]
    public Action? OnAdd { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Segments = await manager._segmentRepository.GetAllSegmentsAsync();

    }

    private async Task HandleSubmit()
    {

        var confirmation = await dialog.ShowAsync(

            title: "Are you sure you want to add?",
            message1: "Y/N"
        );

        if (confirmation)
        {
            SubCategoryModel newSubCategory = new()
                {
                    Name = subcategory.Name,
                    Description = subcategory.Description,
                    SegmentId = subcategory.SegmentId
                };
            try
            {
                await manager._subcategoryRepository.AddSubCategory(newSubCategory);

                navManager.NavigateTo("Admin/SubCategory/SubCategoryPage", true);
            }
            catch (Exception ex)
            {
                ErrorMessage = ex.Message;

            }
        }
    }

}
