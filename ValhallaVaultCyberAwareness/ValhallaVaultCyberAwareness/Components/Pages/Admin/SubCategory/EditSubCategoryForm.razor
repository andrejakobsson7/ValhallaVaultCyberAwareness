@using ValhallaVaultCyberAwareness.Client.ViewModels
@inject AdminManager manager

<ConfirmDialog @ref="dialog"></ConfirmDialog>

<EditForm Model="subcategoryVM" OnValidSubmit="HandleSubmit" FormName="name" class="card w-50">

    <label>
        Name
    </label>

    <InputText @bind-Value="subcategoryVM.Name"></InputText>

    <label>
        Description
    </label>

    <InputText @bind-Value="subcategoryVM.Description"></InputText>

    <label>
        Segment:
    </label>

    <InputSelect @bind-Value="subcategoryVM.SegmentId">
        @foreach (var segment in Segments)
        {
            <option value="@segment.Id">@segment.Name</option>
        }
    </InputSelect>

    <br />

    <input class="btn btn-info" type="submit" value="Update" />

    @if (String.IsNullOrEmpty(ErrorMessage) == false)
    {
        <p class="text-danger" role="alert">@ErrorMessage</p>
    }

</EditForm>


@code {
    [Parameter]
    public SubCategoryModel SubCategory { get; set; } = new();

    private SubCategoryViewModel subcategoryVM { get; set; } = new();

    public List<SegmentModel> Segments { get; set; } = new();

    private string? ErrorMessage;

    private ConfirmDialog dialog;

    // Action that tells the parent component to update when invoked
    [Parameter]
    public Action? OnUpdate { get; set; }


    protected override async Task OnInitializedAsync()
    {
        Segments = await manager._segmentRepository.GetAllSegmentsAsync();
        subcategoryVM = new(SubCategory);
    }

    private async Task HandleSubmit()
    {
        var confirmation = await dialog.ShowAsync(

            title: "Are you sure you want to update?",
            message1: "Y/N"

        );

        if (confirmation)
        {
            SubCategory.Name = subcategoryVM.Name;
            SubCategory.Description = subcategoryVM.Description;
            SubCategory.SegmentId = subcategoryVM.SegmentId;
            try
            {
                await manager._subcategoryRepository.UpdateSubCategoryAsync(SubCategory);
                OnUpdate?.Invoke();
            }
            catch (Exception ex)
            {
                ErrorMessage = ex.Message;

            }

        }

    }

}
