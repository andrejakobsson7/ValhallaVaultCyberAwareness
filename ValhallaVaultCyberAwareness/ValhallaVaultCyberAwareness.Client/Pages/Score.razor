@page "/Score"
@using ValhallaVaultCyberAwareness.Client.Services
@using ValhallaVaultCyberAwareness.Domain.Models

@inject ISegmentService SegmentService

<PageTitle>Quiz Score and Links</PageTitle>

<h3>Quiz Score and Links</h3>

<!-- Check if content has loaded. If it has not display Loading-->
@if (segments == null)
{
    <h2><em>Loading...</em></h2>
}
else
{
    // Div to display cards as a row instead of top to bottom
    <div class="row">
        @foreach (var segmentItem in segments)
        {
            // Create a card for each segment. Then include name, picture, score & a link to select SubSegments
            <div class="col-4">
                <div class="card border-dark text-center w-100 h-300">
                    <img class="card-img-top" src="https://variety.com/wp-content/uploads/2023/04/Twitter-Logo-Doge-Dogecoin.png" alt="Card image cap" />
                    <div class="card-img-overlay">
                        <h2 class="card-title">@segmentItem.Name</h2>
                    </div>
                    <div class="card-footer">
                        <p>@segmentItem.Description</p>
                        <ul>
                           
                            @foreach (var SubCategoryItem in segmentItem.SubCategories)
                            {
                                <!-- 1. List the name of every SubCategory contained in each Segment

                                     2. For every SubCategory contained in a segment, display the amount
                                        of TRUE's IsCorrect contains (a TRUE boolean singifies a correct answer).

                                     3. Count the amount of Questions contained within a SubCategory.
                                -->
                                <li>@SubCategoryItem.Name - 

                                    
                                    <!-- COUNT CORRECT ANSWERS FROM USER, NEEDS FIXING! -->
                                    @(SubCategoryItem.Questions.FirstOrDefault()?
                                    .Answers.Count(a => a.IsCorrect == true) ?? 0)
                                    
                                    / @SubCategoryItem.Questions.Count
                                </li>
                            }
                        </ul>
                        <p class="card-description">@segmentItem.Description</p>
                    </div>
                    <div class="card-footer bg-secondary">
                        <h5 >Completed SubCategories: 

                            <!-- In each SubCategory we compare the amount of booleans in the IsCorrect property
                                 to the amount of booleans that are TRUE (a TRUE boolean signifies a correct answer).
                                 If the amount of TRUE booleans is >= 80% of the amount of booleans,
                                 it counts that as a completed SubCategory and is counted to the max amount of SubCategories.
                            -->
                            @(segmentItem.SubCategories.Count(SubCategory => SubCategory
                            .Questions.FirstOrDefault()?
                            .Answers.Count(a => a.IsCorrect) > 0.8 * 
                            SubCategory.Questions.FirstOrDefault()?
                            .Answers.Count(a => a.IsCorrect))) /

                            <!-- I admit I had to use the help of ChatGPT to make the above monster of a LINQ statement.
                               This was the original I came up with before I asked ChatGPT for help:

                                @(segmentItem.SubCategories.FirstOrDefault()?
                                .Questions.FirstOrDefault()?
                                .Answers.Count(a => a.IsCorrect == true) > @segmentItem.SubCategories.FirstOrDefault()?
                                .Questions.FirstOrDefault()?
                                .Answers.Count(a => a.IsCorrect)
                                * 0.8 ? "true" : "false")
                            -->

                            <!-- Count the amount of SubCategories contained in each Segment-->
                            @segmentItem.SubCategories.Count </h5>

                            <!-- TEST, REMOVE LATER-->
                            <p>TEST @(segmentItem.SubCategories.FirstOrDefault()?.Questions.FirstOrDefault()?.Answers.FirstOrDefault()?.UserAnswers.FirstOrDefault()?.UserId ?? "Default") TEST</p>

                    </div>
                    <a href="@($"https://localhost:7107/quizpage/{segmentItem.Id}")" class="stretched-link"></a>
                </div>
            </div>
        }
    </div>
}

@code {
    // Create a list of all segments using GetSegments();
    private List<SegmentModel>? segments;

    protected override async Task OnInitializedAsync()
    {
        // Use the Category Id and User Id to fetch the corresponding Segment and the user information tied to it.
        segments = await SegmentService.GetSegmentsByCategoryIdAsync(1, "1872fec2-27e0-4aa2-b876-5de387b62fbc");
    }
}
