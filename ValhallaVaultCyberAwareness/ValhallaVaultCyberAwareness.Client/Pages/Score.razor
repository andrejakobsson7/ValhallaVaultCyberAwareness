@page "/Score"
@using ValhallaVaultCyberAwareness.Client.Services
@using ValhallaVaultCyberAwareness.Domain.Models

@inject ISegmentService SegmentService

<PageTitle>Quiz Score and Links</PageTitle>

<h3>Quiz Score and Links</h3>

<!-- Check if content has loaded. If it has not display Loading-->
@if (segments == null)
{
    <h2><em>Loading...</em></h2>
}
else
{
    // Div to display cards as a row instead of top to bottom
    <div class="row">
        @foreach (var segmentItem in segments)
        {
            // Create a card for each segment. Then include name, picture, score & a link to select SubSegments
            <div class="col-4">
                <div class="card border-dark text-center w-100 h-300">
                    <img class="card-img-top" src="https://variety.com/wp-content/uploads/2023/04/Twitter-Logo-Doge-Dogecoin.png" alt="Card image cap" />
                    <div class="card-img-overlay">
                        <h2 class="card-title">@segmentItem.Name</h2>
                    </div>
                    <div class="card-footer">
                        <p>@segmentItem.Description</p>
                        <ul>
                            @foreach (var subcategoryItem in segmentItem.SubCategories)
                            {
                                <li>@subcategoryItem.Name - 0 / @subcategoryItem.Questions.Count</li>
                            }
                        </ul>
                        <p class="card-description">@segmentItem.Description</p>
                    </div>
                    <div class="card-footer bg-secondary">
                        <h5 >Completed SubCategories:   / @segmentItem.SubCategories.Count </h5>
                    </div>
                    <a href="@($"https://localhost:7107/quizpage/{segmentItem.Id}")" class="stretched-link"></a>
                </div>
            </div>
        }
    </div>
}

@code {
    // Create a list of all segments using GetSegments();
    private List<SegmentModel>? segments;
     // private List<QuestionModel>? questions;

    protected override async Task OnInitializedAsync()
    {
        segments = await SegmentService.GetSegmentsByCategoryIdAsync(1);
    }
}
