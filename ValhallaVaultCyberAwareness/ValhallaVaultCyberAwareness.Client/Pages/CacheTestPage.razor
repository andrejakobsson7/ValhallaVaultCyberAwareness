@page "/CacheTestPage"
@using Microsoft.AspNetCore.Identity
@using ValhallaVaultCyberAwareness.Client.Services
@using ValhallaVaultCyberAwareness.Client.ViewModels
@using ValhallaVaultCyberAwareness.Data
@using ValhallaVaultCyberAwareness.Domain.Models
@rendermode InteractiveAuto
@inject ICategoryService categoryService;
@inject AuthenticationStateProvider authStateProvider;
@inject ISegmentService segmentService;
@inject IQuestionService questionService
@inject ISubCategoryService subCategoryService;
@inject IUserAnswersService userAnswersService;

@code {

	protected override async Task OnInitializedAsync()
	{
		//1. Call is made to the db and stored in the cache
		string userId = "532fdc53-0e3a-4857-a413-455d2d373527";
		DateTime startTimeDbCall = DateTime.Now;
		List<CategoryModel> allCategoriesFromDb = await categoryService.GetAllCategoriesAsync();
		DateTime endTimeDbCall = DateTime.Now;
		double dbdiff = MeasureTimeDifferenceBetweenTwoCalls(startTimeDbCall, endTimeDbCall);

		//2. Another identical call is made and fetched from the cache - correctly!
		DateTime startTimeCacheCall = DateTime.Now;
		List<CategoryModel> allCategoriesFromCache = await categoryService.GetAllCategoriesAsync();
		DateTime endTimeCacheCall = DateTime.Now;
		double cachediff = MeasureTimeDifferenceBetweenTwoCalls(startTimeCacheCall, endTimeCacheCall);
		double diffdbVsCache = MeasureDiffBetweenTwoDoubles(dbdiff, cachediff);

		//3. Make call to get specific category with categoryId and userId. Stored in cache
		var category = await categoryService.GetCategoryWithUserScore(1, userId);

		//4. Make call to get specific category with categoryId and userId. Store in cache. This id will not be altered in any CRUD-action below.
		var unrelatedCategory = await categoryService.GetCategoryWithUserScore(2, userId);

		//ADD CATEGORY

		//5. A new category is added to the database
		//It should evict the cache for all categories
		bool isSuccessfullyAddedCategory = await categoryService.AddCategoryAsync(new CategoryModel()
			{
				Name = "Test ny kategori 1"
			});

		//6. Make new call to get all categories
		//It is fetched fresh from the db - correctly!
		List<CategoryModel> allCategoriesAfterAddition = await categoryService.GetAllCategoriesAsync();

		//7. Make new call to get specific category with categoryId and userId.
		//It is still fetched from the cache as it was before the addition of a new category - correctly!
		var category2 = await categoryService.GetCategoryWithUserScore(1, userId);

		//DELETE CATEGORY

		//8. Delete a category in the database
		bool isSuccessfullyDeletedCategory = await categoryService.RemoveCategoryAsync(16);

		//9. Make new call to get all categories. 
		// It is fetched fresh from the db - correctly!
		List<CategoryModel> allCategoriesAfterDelete = await categoryService.GetAllCategoriesAsync();

		//10. Make new call to get specific category with categoryId, same as before delete
		//It is still fetched from the cache - correctly!
		var category3 = await categoryService.GetCategoryWithUserScore(1, userId);

		//11. Make specific call for one category by id. It has not been altered in the delete, so it should still be fetched from the cache
		//It is fetched from the cache - correctly!
		var unRelatedCategory3 = await categoryService.GetCategoryWithUserScore(2, userId);

		//UPDATE CATEGORY

		//12. An update of an existing category is made to the database
		//This should evict all tags on ID- and general level
		bool isSuccessfullyUpdatedCategory = await categoryService.UpdateCategoryAsync(new CategoryModel()
		{
			Id = allCategoriesAfterDelete[0].Id,
			Name = allCategoriesAfterDelete[0].Name,
			Description = "Ny kategoribeskrivning22335566"
		});

		//13. Make new call to get all categories. It is fetched fresh from the db - correctly!
		List<CategoryModel> allCategoriesAfterUpdate = await categoryService.GetAllCategoriesAsync();

		//14. Make new call to get specific category by id. The id is the one that was altered in the update, so it should be fetched fresh from the db
		//OK!
		var category4 = await categoryService.GetCategoryWithUserScore(1, userId);

		//12. Make specific call for one category by id. It has not been altered in the update, so it should still be fetched from the cache
		//It is fetched from the cache - correctly!
		var unRelatedCategory4 = await categoryService.GetCategoryWithUserScore(2, userId);

		//13. Make call for another userid. This has not been queried before so it should be fetched from the db.
		//It is correctly fetched from the database
		var newUserCategoryScore = await categoryService.GetCategoryWithUserScore(2, "5db5968d-eb63-4515-a74c-9dc7b5d4328e");

		//DELETE SEGMENT
		//14. Delete segment. Segment is nested under category. The deleted segment belongs to category-ID 2
		// If it's queried for categories after that, it needs to hold the updated segment information, since it's included in those queries.
		bool isSuccessfullyDeletedSegment = await segmentService.RemoveSegmentAsync(19);

		//15. Make new call to get all categories. This should be fetched fresh from the db, since the call to get all categories includes segments.
		//It is correctly fetched fresh from db!
		List<CategoryModel> allCategoriesAfterSegmentDelete = await categoryService.GetAllCategoriesAsync();

		//16. Make new call to get single category. This has not been affected by the previous segment-removal since it belongs to another category-ID and should be fetched from the cache
		//Is is correctly fetched from the cache!
		var category5 = await categoryService.GetCategoryWithUserScore(1, userId);

		//17. Make new call to get a single category. This has been affected by the previous segment-removal since it belongs to the category that has been changed with the segment removal.
		//Excepted to fetch fresh from db.
		//It is correctly fetched from the db!
		var newUserCategoryScore2 = await categoryService.GetCategoryWithUserScore(2, "5db5968d-eb63-4515-a74c-9dc7b5d4328e");

		//18 Add new subcategory
		//When a new subcategory is added, we should evict the shared cache for category/segment/subcategory so that when a new general call is made, it will fetch fresh data from the db.
		bool isSuccessfullyAddedSubCategory = await subCategoryService.AddSubCategoryAsync(new SubCategoryModel()
			{
				Name = "Test ny subkategori 2234445557777",
				Description = "Vad ska man skriva här?",
				SegmentId = 1
			});

		//19 Make call to get all categories. It should fetch fresh data from the db.
		//It is fetching from the db - correctly!
		List<CategoryModel> allCategoriesAfterSubCategoryAdd = await categoryService.GetAllCategoriesAsync();

		//20 Make call to get single category by id (1). This has been affected by the addition of the subcategory, since the subcategory's segment belongs to category-ID 1
		//It is fetching from the db - correctly!
		var category6 = await categoryService.GetCategoryWithUserScore(1, userId);

		//21 Make call to get category that has not been affected by addition of subcategory.It should still fetch from the cache
		//It is fetching from the cache - correctly!
		var newUserCategoryScore3 = await categoryService.GetCategoryWithUserScore(2, "5db5968d-eb63-4515-a74c-9dc7b5d4328e");

		//22 Update existing subcategory in db.
		//This should evict general cache and on ID-level in all entities
		var newUserCategoryScore4 = await categoryService.GetCategoryWithUserScore(2, "5db5968d-eb63-4515-a74c-9dc7b5d4328e");

		bool isSuccessfullyUpdatedSubCategory = await subCategoryService.UpdateSubCategoryAsync(new SubCategoryModel()
			{
				Id = 2,
				Name = "Romansbedrägeri UPPDATERAD23",
				SegmentId = 1,
				Description = "TEST"
			});

			//23. Get all categories, this should be fetched from db
		List<CategoryModel> allCategoriesAfterSubCategoryUpdate = await categoryService.GetAllCategoriesAsync();

		//24. Get single category. This should be fetched from the db since category 1 has been altered (included segment-id 1 has been added a new subcategory)
		var category7 = await categoryService.GetCategoryWithUserScore(1, userId);

		//25 Get category that has not been affected by update of subcategory. Should fetch from cache
		var newUserCategoryScore5 = await categoryService.GetCategoryWithUserScore(2, "5db5968d-eb63-4515-a74c-9dc7b5d4328e");


	}


	private double MeasureTimeDifferenceBetweenTwoCalls(DateTime startTime, DateTime endTime)
	{
		return (endTime - startTime).TotalSeconds;
	}

	private double MeasureDiffBetweenTwoDoubles(double dbDouble, double dbCacheDouble)
	{
		return dbDouble - dbCacheDouble;
	}
}
