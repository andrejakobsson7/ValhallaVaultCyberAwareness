@page "/CacheTestPage"
@using Microsoft.AspNetCore.Identity
@using ValhallaVaultCyberAwareness.Client.Services
@using ValhallaVaultCyberAwareness.Client.ViewModels
@using ValhallaVaultCyberAwareness.Data
@using ValhallaVaultCyberAwareness.Domain.Models
@rendermode InteractiveAuto
@inject ICategoryService categoryService;
@inject AuthenticationStateProvider authStateProvider;
@inject ISegmentService segmentService;
@inject IQuestionService questionService
@inject ISubCategoryService subCategoryService;
@inject IUserAnswersService userAnswersService;

@code {

	protected override async Task OnInitializedAsync()
	{
		//1. Call is made to the db and stored in the cache
		string userId = "532fdc53-0e3a-4857-a413-455d2d373527";
		DateTime startTimeDbCall = DateTime.Now;
		List<CategoryModel> allCategoriesFromDb = await categoryService.GetAllCategoriesAsync();
		DateTime endTimeDbCall = DateTime.Now;
		double dbdiff = MeasureTimeDifferenceBetweenTwoCalls(startTimeDbCall, endTimeDbCall);

		//2. Another identical call is made and fetched from the cache - correctly!
		DateTime startTimeCacheCall = DateTime.Now;
		List<CategoryModel> allCategoriesFromCache = await categoryService.GetAllCategoriesAsync();
		DateTime endTimeCacheCall = DateTime.Now;
		double cachediff = MeasureTimeDifferenceBetweenTwoCalls(startTimeCacheCall, endTimeCacheCall);
		double diffdbVsCache = MeasureDiffBetweenTwoDoubles(dbdiff, cachediff);

		//3. Make call to get specific category with categoryId and userId. Stored in cache
		var category = await categoryService.GetCategoryWithUserScore(1, userId);

		//4. Make call to get specific category with categoryId and userId. Store in cache. This id will not be altered in any CRUD-action below.
		var unrelatedCategory = await categoryService.GetCategoryWithUserScore(2, userId);

		//ADD CATEGORY

		//5. A new category is added to the database
		//It should evict the cache for all categories
		bool isSuccessfullyAddedCategory = await categoryService.AddCategoryAsync(new CategoryModel()
			{
				Name = "Test ny kategori 12"
			});

		//6. Make new call to get all categories
		//It is fetched fresh from the db - correctly!
		List<CategoryModel> allCategoriesAfterAddition = await categoryService.GetAllCategoriesAsync();

		//7. Make new call to get specific category with categoryId and userId.
		//It is still fetched from the cache as it was before the addition of a new category - correctly!
		var category2 = await categoryService.GetCategoryWithUserScore(1, userId);

		//DELETE CATEGORY

		//8. Delete a category in the database
		bool isSuccessfullyDeletedCategory = await categoryService.RemoveCategoryAsync(24);

		//9. Make new call to get all categories. 
		// It is fetched fresh from the db - correctly!
		List<CategoryModel> allCategoriesAfterDelete = await categoryService.GetAllCategoriesAsync();

		//10. Make new call to get specific category with categoryId, same as before delete
		//It is still fetched from the cache - correctly!
		var category3 = await categoryService.GetCategoryWithUserScore(1, userId);

		//11. Make specific call for one category by id. It has not been altered in the delete, so it should still be fetched from the cache
		//It is fetched from the cache - correctly!
		var unRelatedCategory3 = await categoryService.GetCategoryWithUserScore(2, userId);

		//UPDATE CATEGORY

		//12. An update of an existing category is made to the database
		//This should evict all tags on ID- and general level
		bool isSuccessfullyUpdatedCategory = await categoryService.UpdateCategoryAsync(new CategoryModel()
		{
			Id = allCategoriesAfterDelete[0].Id,
			Name = allCategoriesAfterDelete[0].Name,
			Description = "Ny kategoribeskrivning22335566"
		});

		//13. Make new call to get all categories. It is fetched fresh from the db - correctly!
		List<CategoryModel> allCategoriesAfterUpdate = await categoryService.GetAllCategoriesAsync();

		//14. Make new call to get specific category by id. The id is the one that was altered in the update, so it should be fetched fresh from the db
		//OK!
		var category4 = await categoryService.GetCategoryWithUserScore(1, userId);

		//12. Make specific call for one category by id. It has not been altered in the update, so it should still be fetched from the cache
		//It is fetched from the cache - correctly!
		var unRelatedCategory4 = await categoryService.GetCategoryWithUserScore(2, userId);

		//13. Make call for another userid. This has not been queried before so it should be fetched from the db.
		//It is correctly fetched from the database
		var newUserCategoryScore = await categoryService.GetCategoryWithUserScore(2, "5db5968d-eb63-4515-a74c-9dc7b5d4328e");

		//DELETE SEGMENT
		//14. Delete segment. Segment is nested under category. The deleted segment belongs to category-ID 2
		// If it's queried for categories after that, it needs to hold the updated segment information, since it's included in those queries.
		bool isSuccessfullyDeletedSegment = await segmentService.RemoveSegmentAsync(18);

		//15. Make new call to get all categories. This should be fetched fresh from the db, since the call to get all categories includes segments.
		//It is correctly fetched fresh from db!
		List<CategoryModel> allCategoriesAfterSegmentDelete = await categoryService.GetAllCategoriesAsync();

		//16. Make new call to get single category. This has not been affected by the previous segment-removal since it belongs to another category-ID and should be fetched from the cache
		//Is is correctly fetched from the cache!
		var category5 = await categoryService.GetCategoryWithUserScore(1, userId);

		//17. Make new call to get a single category. This has been affected by the previous segment-removal since it belongs to the category that has been changed with the segment removal.
		//Excepted to fetch fresh from db.
		//It is correctly fetched from the db!
		var newUserCategoryScore2 = await categoryService.GetCategoryWithUserScore(2, "5db5968d-eb63-4515-a74c-9dc7b5d4328e");

		//18 Add new subcategory
		//When a new subcategory is added, we should evict the shared cache for category/segment/subcategory so that when a new general call is made, it will fetch fresh data from the db.
		bool isSuccessfullyAddedSubCategory = await subCategoryService.AddSubCategoryAsync(new SubCategoryModel()
			{
				Name = "Test ny subkategori 2234445557777",
				Description = "Vad ska man skriva här?",
				SegmentId = 1
			});

		//19 Make call to get all categories. It should fetch fresh data from the db.
		//It is fetching from the db - correctly!
		List<CategoryModel> allCategoriesAfterSubCategoryAdd = await categoryService.GetAllCategoriesAsync();

		//20 Make call to get single category by id (1). This has been affected by the addition of the subcategory, since the subcategory's segment belongs to category-ID 1
		//It is fetching from the db - correctly!
		var category6 = await categoryService.GetCategoryWithUserScore(1, userId);

		//21 Make call to get category that has not been affected by addition of subcategory.It should still fetch from the cache
		//It is fetching from the cache - correctly!
		var newUserCategoryScore3 = await categoryService.GetCategoryWithUserScore(2, "5db5968d-eb63-4515-a74c-9dc7b5d4328e");

		//22 Update existing subcategory in db.
		//This should evict general cache and on ID-level in all entities
		var newUserCategoryScore4 = await categoryService.GetCategoryWithUserScore(1024, "5db5968d-eb63-4515-a74c-9dc7b5d4328e");

		bool isSuccessfullyUpdatedSubCategory = await subCategoryService.UpdateSubCategoryAsync(new SubCategoryModel()
			{
				Id = 2,
				Name = "Romansbedrägeri UPPDATERAD23",
				SegmentId = 1,
				Description = "TEST"
			});

		//23. Get all categories, this should be fetched from db
		List<CategoryModel> allCategoriesAfterSubCategoryUpdate = await categoryService.GetAllCategoriesAsync();

		//24. Get single category. This should be fetched from the db since category 1 has been altered (included segment-id 1 has been added a new subcategory)
		var category7 = await categoryService.GetCategoryWithUserScore(1, userId);

		//25 Get category that has not been affected by update of subcategory. Should fetch from cache
		//It's correctly fetching from the cache!
		var newUserCategoryScore5 = await categoryService.GetCategoryWithUserScore(2, "5db5968d-eb63-4515-a74c-9dc7b5d4328e");

		//26 Add new useranswers
		List<UserAnswers> newUserAnswers = new();
		newUserAnswers.Add(new UserAnswers()
			{
				AnswerId = 5,
				UserId = userId
			});
		bool isSuccessfullyRegisteredAnswers = await userAnswersService.AddUserAnswersAsync(newUserAnswers);

		//27 Get category. Should get from db to get updated data.
		//It gets from db!
		var category8 = await categoryService.GetCategoryWithUserScore(1, userId);

		//28 Test with another user - should still get from cache
		//It fetches from cache!
		var newUserCategoryScore6 = await categoryService.GetCategoryWithUserScore(2, "5db5968d-eb63-4515-a74c-9dc7b5d4328e");

		//29 Add new segment
		//When a new segment is added, we need to evict the category-ID from the cache and the general cache for categories/segment/subcategories
		bool isSuccessfullyAddedSegment = await segmentService.AddSegmentAsync(new SegmentModel()
			{
				Name = "New segment",
				Description = "Test add new segment",
				CategoryId = 1
			});
		//30 Get category ID 1. This should now fetch from the db, since it has been altered after the addition of a new segment in it.
		//It is correctly fetching from the db!
		var category9 = await categoryService.GetCategoryWithUserScore(1, userId);

		//31 Get all categories. This should also fetch from the db, since it includes segments.
		//It is correctly fetching from the db!
		List<CategoryModel> allCategoriesAfterSegmentAdd = await categoryService.GetAllCategoriesAsync();

		//32 Test change categoryID for a segment
		bool isSuccessfullyUpdatedSegment = await segmentService.UpdateSegmentAsync(new SegmentModel()
			{
				Id = 21,
				Name = "New segment",
				Description = "Updated segmentdescription",
				//Change from categoryId 1 to 2
				CategoryId = 1
			});
		//33. Make call to get category with ID 1. This has now been altered, since it has losed one category. It should fetch from db
		//It fetches from the DB - correctly!
		var category10 = await categoryService.GetCategoryWithUserScore(1, userId);

		//33 Make call to get category with ID 2. This has now been altered, since it has losed one category. It should fetch from db
		//It fetches from the DB - correctly!
		var newUserCategoryScore7 = await categoryService.GetCategoryWithUserScore(2, "5db5968d-eb63-4515-a74c-9dc7b5d4328e");

		//34 Make call to get all categories. Since it includes segment, it should fetch fresh from db
		//It fetches from the DB - correctly!
		List<CategoryModel> allCategoriesAfterSegmentUpdate = await categoryService.GetAllCategoriesAsync();

		//35 Update subcategory. DONT' change the segmentId
		bool isSuccessfullyUpdatedSubCategory2 = await subCategoryService.UpdateSubCategoryAsync(new SubCategoryModel()
			{
				Id = 4,
				Name = "Nytt telefonbedrägeri",
				SegmentId = 1
			});
		//36. Make call to get category by ID 1. This has been altered by the update of subcategory above (since segment 1 belongs to category-id 1) so it should fetch from the db
		//It is correctly fetching from the db
		var category11 = await categoryService.GetCategoryWithUserScore(1, userId);

		//37. Make call to get category by ID 2. This has not been altered by the updated of subcategory above, so it should fetch from the cache
		//It is still fetched from the cache
		var newUserCategoryScore8 = await categoryService.GetCategoryWithUserScore(2, "5db5968d-eb63-4515-a74c-9dc7b5d4328e");

		//38. Make call to get all categories. This should fetch fresh from the db
		//It is correctly fetched from the db
		List<CategoryModel> allCategoriesAfterSubCategoryUpdate2 = await categoryService.GetAllCategoriesAsync();

		//39 Update subcategory. CHANGE the segmentId, it stays in the same category
		bool isSuccessfullyUpdatedSubCategory3 = await subCategoryService.UpdateSubCategoryAsync(new SubCategoryModel()
			{
				Id = 4,
				Name = "Nytt telefonbedrägeri",
				SegmentId = 1
			});

		//36. Make call to get category by ID 1. This has been altered by the update of subcategory above (since segment 1 belongs to category-id 1) so it should fetch from the db
		//It is correctly fetching from DB
		var category12 = await categoryService.GetCategoryWithUserScore(1, userId);

		//37. Make call to get category by ID 2. This has not been altered in the update above, since segment 1 and 2 belongs to the same category
		//It correctly fetches from db

		var newUserCategoryScore9 = await categoryService.GetCategoryWithUserScore(2, "5db5968d-eb63-4515-a74c-9dc7b5d4328e");

		//38. Make call to get all categories. This should fetch fresh from the db
		//It correctly fetches from db
		List<CategoryModel> allCategoriesAfterSubCategoryUpdate3 = await categoryService.GetAllCategoriesAsync();

		//Update subcategory, change segment that belongs to another category
		bool isSuccessfullyUpdatedSubCategory4 = await subCategoryService.UpdateSubCategoryAsync(new SubCategoryModel()
			{
				Id = 4,
				Name = "Nytt telefonbedrägeri22",
				SegmentId = 4
			});

			//Make call to get category by ID 1. This has been altered so should fetch from db
		var category13 = await categoryService.GetCategoryWithUserScore(1, userId);

		//37. Make call to get category by ID 2. This has been altered in the update above, since one of it's segments has been added a new subcategory
		//Should fetch from db
		var newUserCategoryScore10 = await categoryService.GetCategoryWithUserScore(2, "5db5968d-eb63-4515-a74c-9dc7b5d4328e");

		//36. Make call to get category by ID 1. This has been altered by the update of subcategory above (since it has lost one of it's segments), so it should get fresh data from db
		//
		var category14 = await categoryService.GetCategoryWithUserScore(1, userId);

		//38. Make call to get all categories. This should fetch fresh from the db
		//
		List<CategoryModel> allCategoriesAfterSubCategoryUpdate4 = await categoryService.GetAllCategoriesAsync();
	}


	private double MeasureTimeDifferenceBetweenTwoCalls(DateTime startTime, DateTime endTime)
	{
		return (endTime - startTime).TotalSeconds;
	}

	private double MeasureDiffBetweenTwoDoubles(double dbDouble, double dbCacheDouble)
	{
		return dbDouble - dbCacheDouble;
	}
}
