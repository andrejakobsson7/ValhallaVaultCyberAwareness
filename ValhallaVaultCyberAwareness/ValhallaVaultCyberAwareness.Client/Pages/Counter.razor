@page "/counter"
@using Microsoft.AspNetCore.Identity
@using ValhallaVaultCyberAwareness.Client.Services
@using ValhallaVaultCyberAwareness.Client.ViewModels
@using ValhallaVaultCyberAwareness.Data
@using ValhallaVaultCyberAwareness.Domain.Models
@rendermode InteractiveAuto
@inject ICategoryService categoryService;
@inject ISegmentService segmentService;
@inject IQuestionService questionService
@inject ISubCategoryService subCategoryService;
@* @inject UserManager<ApplicationUser> UserManager
 *@
<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@* DEMO TO TEST CONCEPT WITH VIEWMODELS *@

@foreach(SegmentUserScoreViewModel segmentUserScore in SegmentUserScores)
{
    //Access the segment name
    <p>Segment name: @segmentUserScore.SegmentName</p>

    //Access the segment desription
    <p>Segment description: @segmentUserScore.SegmentDescription</p>

    //Access if the user has completed this segment (true/false)
    <p>User has completed segment: @segmentUserScore.UserHasCompletedSegment</p>

    //Access each subcategory in the segment by looping through it
    @foreach(var subcategory in segmentUserScore.SubCategoryScores)
    {
        //Access the subcategory name
        <p>Subcategory name: @subcategory.SubCategoryName</p>
        //Access the users correct answers
        <p>Correct answers in subcategory: @subcategory.CorrectUserAnswers</p>

        //Access the total question count
        <p>Total questions: @subcategory.TotalQuestions</p>

        //Access if the user has completed this subcategory (true/false)
        <p>User has completed subcategory: @subcategory.UserHasCompletedSubCategory</p>
    }
}

@code {
    private int currentCount = 0;
    private List<SegmentUserScoreViewModel> SegmentUserScores = new();

    private void IncrementCount()
    {
        currentCount++;
    }

    protected override async Task OnInitializedAsync()
    {
        //TEST CALL CATEGORIES
        // List<CategoryModel> allCategories = await categoryService.GetAllCategoriesAsync();

        //TEST CALL SEGMENTS
        // List<SegmentModel> allSegments = await segmentService.GetSegmentsByCategoryIdAsync(1, "e547fd1c-ec07-49e1-b2ce-0d326f467c01");

        //TEST CALL CATEGORY
        // var category = await categoryService.GetCategoryByIdAsync(1);

        //TEST ADD NEW SEGMENT
        // SegmentModel newSegment = new()
        //     {
        //         Name = "New segment",
        //         Description = "Test description for new segment",
        //         CategoryId = 1
        //     };
        // bool isSegmentAdded = await segmentService.AddSegmentAsync(newSegment);

        //TEST UPDATE SEGMENT
        // List<SegmentModel> segmentsToUpdate = await segmentService.GetSegmentsByCategoryIdAsync(1, "e547fd1c-ec07-49e1-b2ce-0d326f467c01");
        // SegmentModel segment = new()
        //     {
        //         Id = segmentsToUpdate[0].Id,
        //         Name = "Test ändra namn",
        //         CategoryId = segmentsToUpdate[0].CategoryId,
        //         Description = "Lägg till beskrivning"

        //     };
        // bool isUpdated = await segmentService.UpdateSegmentAsync(segment);

        //TEST CALL QUESTIONS
        // List<QuestionModel> allQuestions = await questionService.GetAllQuestionsBySubCategoryId(1);

        var allQuestionViewModels = await questionService.ImprovedGetQuestionsBySubCategoryId(1);

        //TEST ADD NEW QUESTION
        // QuestionModel newQuestion = new QuestionModel
        //  {
        //      Id = 0,
        //      Question = "Hej",
        //      SubCategoryId = 1,
        //  };

        //  await questionService.AddQuestionAsync(newQuestion);

        //TEST CALL GET USERS IN ROLE
        // var users = await UserManager.GetUsersInRoleAsync("Admin");

        //TEST ADD NEW SUBCATEGORY
        // SubCategoryModel newSubCategory = new()
        //     {
        //         Name = "New subcategory",
        //         Description = "New subcategory description",
        //         SegmentId = 1
        //     };
        // bool isAdded = await subCategoryService.AddSubCategoryAsync(newSubCategory);

        //TEST REMOVE SUBCATEGORY
        // bool isRemoved = await subCategoryService.RemoveSubCategoryAsync(36);

        //TEST UPDATE SUBCATEGORY
        // List<SubCategoryModel> subCategories = await subCategoryService.GetSubCategoriesBySegmentIdAsync(2);
        // SubCategoryModel subToUpdate = new()
        //     {
        //         Id = subCategories[0].Id,
        //         Name = "Test ändring subkategori",
        //         Description = "Ny beskrivning",
        //         SegmentId = subCategories[0].SegmentId
        //     };

        // bool isUpdated = await subCategoryService.UpdateSubCategoryAsync(subToUpdate);

        //TEST ADD NEW CATEGORY
        // bool isAdded = await categoryService.AddCategoryAsync(new CategoryModel()
        //     {
        //         Name = "Test category",
        //         Description = "N/A"

        //     });

        //TEST REMOVE CATEGORY
        // bool isRemoved = await categoryService.RemoveCategoryAsync(4);

        //TEST UPDATE CATEGORY
        // var categories = await categoryService.GetAllCategoriesAsync();
        // var x = await categoryService.UpdateCategoryAsync(new CategoryModel()
        //     {
        //         Id = categories[0].Id,
        //         Name = "New category name"
        //     });

        //TEST ADD NEW QUESTION
        // var x = await questionService.AddQuestionAsync(new QuestionModel()
        //     {
        //         Question = "How old are you?",
        //         SubCategoryId = 3
        //     });

        //TEST REMOVE QUESTION
        // var y = await questionService.RemoveQuestionAsync(12);

        //TEST UPDATE QUESTION
        // var a = await questionService.GetAllQuestionsBySubCategoryId(1);
        // var z = await questionService.UpdateQuestionAsync(new QuestionModel()
        //    {
        //        Id = a[0].Id,
        //        Question = "How are you doing today????"
        //    });

        //TEST IMPROVED SERVICE CALL FOR SEGMENTS
        SegmentUserScores = await segmentService.ImprovedGetSegmentsByCategoryIdAsync(1, "3de3f363-9b6f-47e5-b6df-4f43baa4a70d");

    }
}
