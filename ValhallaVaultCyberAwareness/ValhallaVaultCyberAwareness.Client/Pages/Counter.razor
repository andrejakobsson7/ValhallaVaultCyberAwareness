@page "/counter"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using ValhallaVaultCyberAwareness.Client.Services
@using ValhallaVaultCyberAwareness.Client.ViewModels
@using ValhallaVaultCyberAwareness.Data
@using ValhallaVaultCyberAwareness.Domain.Models
@rendermode InteractiveServer
@inject ICategoryService categoryService;
@inject AuthenticationStateProvider authStateProvider;
@inject ISegmentService segmentService;
@inject IQuestionService questionService
@inject ISubCategoryService subCategoryService;
@inject IUserAnswersService userAnswersService;
@attribute [Authorize]
@* @inject UserManager<ApplicationUser> UserManager
 *@
<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@* DEMO TO TEST CONCEPT WITH VIEWMODELS *@

@* @foreach(SegmentUserScoreViewModel segmentUserScore in SegmentUserScores)
{
    //Access the segment name
    <p>Segment name: @segmentUserScore.SegmentName</p>

    //Access the segment desription
    <p>Segment description: @segmentUserScore.SegmentDescription</p>

    //Access if the user has completed this segment (true/false)
    <p>User has completed segment: @segmentUserScore.UserHasCompletedSegment</p>

    //Access each subcategory in the segment by looping through it
    @foreach(var subcategory in segmentUserScore.SubCategoryScores)
    {
        //Access the subcategory name
        <p>Subcategory name: @subcategory.SubCategoryName</p>
        //Access the users correct answers
        <p>Correct answers in subcategory: @subcategory.CorrectUserAnswers</p>

        //Access the total question count
        <p>Total questions: @subcategory.TotalQuestions</p>

        //Access if the user has completed this subcategory (true/false)
        <p>User has completed subcategory: @subcategory.UserHasCompletedSubCategory</p>
    }
} *@

@* DEMO TO TEST CONCEPT WITH VIEWMODELS FOR QUESTIONS
 *@
<EditForm Model="@allQuestionsAndAnswers" OnValidSubmit="SubmitQuiz" Context="QuestionAnswerForm">
    <p>Fråga @(questionIdToDisplay + 1) / @allQuestionsAndAnswers.Count</p>
    <p>@currentQuestion.Question</p>
    <EditForm Model="@currentQuestion" OnValidSubmit="SubmitQuestionAnswer" Context="UserAnswerForm">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <InputRadioGroup Name="@currentQuestion.QuestionId.ToString()" @bind-Value="currentQuestion.UserAnswerId">
            @foreach (var answer in currentQuestion.Answers)
            {
                //Disable options if the user has submitted the answer.
                if(currentQuestion.IsAnswerSubmitted == false)
                {
                    <InputRadio Value="@answer.Id" id="@answer.Id"></InputRadio>
                    <label for="@answer.Id"> @answer.Answer</label>
                    <br />
                }
                else
                {
                    //Disable options and set correct answer to green and the rest to red.
                    <InputRadio Value="@answer.Id" id="@answer.Id" disabled></InputRadio>
                    @if(answer.Id == currentQuestion.CorrectAnswerId)
                    {
                        <label class="text-success" for="@answer.Id"> @answer.Answer</label>
                    }
                    else
                    {
                        <label class="text-danger" for="@answer.Id"> @answer.Answer</label>
                    }
                    <br />
                }
            }
        </InputRadioGroup>

        @if(currentQuestion.IsAnswerSubmitted == false)
        {
            <button class="btn btn-warning" type="submit">Submit answer</button>
        }
        else
        {
            @if (currentQuestion.CorrectAnswerId == currentQuestion.UserAnswerId)
            {
                <p>You answered correctly!</p>
            }
            else
            {
                <p>You answered wrong!</p>
            }
            <p>@currentQuestion.Explanation</p>
        }
    </EditForm>
    @if (allQuestionsAndAnswers.All(q => q.IsAnswerSubmitted))
    {
        <button class="btn btn-primary" type="submit">Submit quiz</button>
    }
    else if(currentQuestion.IsAnswerSubmitted)
    {
        <button class="btn btn-secondary" @onclick="MoveToNextQuestion">Next question</button>
    }
</EditForm>


@code {
    private int currentCount = 0;
    private List<SegmentUserScoreViewModel> SegmentUserScores = new();
    private List<QuestionAnswerViewModel> allQuestionsAndAnswers = new();
    private int questionIdToDisplay = 0;
    private QuestionAnswerViewModel currentQuestion = new();

    private void IncrementCount()
    {
        currentCount++;
    }

    private void MoveToNextQuestion()
    {
        questionIdToDisplay++;
        if (questionIdToDisplay > allQuestionsAndAnswers.Count)
        {

        }
        else
        {
            currentQuestion = allQuestionsAndAnswers[questionIdToDisplay];
        }
    }

    private void SubmitQuestionAnswer()
    {
        currentQuestion.IsAnswerSubmitted = true;
    }

    private async void SubmitQuiz()
    {
        List<UserAnswers> userAnswers = new();
        //Loop through each qa-viewmodel and extract answer id and userid
        foreach (var questionAnswer in allQuestionsAndAnswers)
        {
            userAnswers.Add(new UserAnswers()
                {
                    AnswerId = questionAnswer.UserAnswerId,
                    UserId = "3de3f363-9b6f-47e5-b6df-4f43baa4a70d",
                });
            if (questionAnswer.CorrectAnswerId != questionAnswer.UserAnswerId)
            {
                //User has answered the question wrong.
            }
        }
        //Add to db
        bool isSuccessfullyRegistered = await userAnswersService.AddUserAnswersAsync(userAnswers);
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        string userId = authState.User.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

        //TEST CALL CATEGORIES
        // List<CategoryModel> allCategories = await categoryService.GetAllCategoriesAsync();

        //TEST CALL SEGMENTS
        // List<SegmentModel> allSegments = await segmentService.GetSegmentsByCategoryIdAsync(1, "e547fd1c-ec07-49e1-b2ce-0d326f467c01");

        //TEST CALL CATEGORY
        // var category = await categoryService.GetCategoryByIdAsync(1);

        //TEST ADD NEW SEGMENT
        // SegmentModel newSegment = new()
        //     {
        //         Name = "New segment",
        //         Description = "Test description for new segment",
        //         CategoryId = 1
        //     };
        // bool isSegmentAdded = await segmentService.AddSegmentAsync(newSegment);

        //TEST UPDATE SEGMENT
        // List<SegmentModel> segmentsToUpdate = await segmentService.GetSegmentsByCategoryIdAsync(1, "e547fd1c-ec07-49e1-b2ce-0d326f467c01");
        // SegmentModel segment = new()
        //     {
        //         Id = segmentsToUpdate[0].Id,
        //         Name = "Test ändra namn",
        //         CategoryId = segmentsToUpdate[0].CategoryId,
        //         Description = "Lägg till beskrivning"

        //     };
        // bool isUpdated = await segmentService.UpdateSegmentAsync(segment);

        //TEST CALL QUESTIONS
        // List<QuestionModel> allQuestions = await questionService.GetAllQuestionsBySubCategoryId(1);

        // allQuestionsAndAnswers = await questionService.ImprovedGetQuestionsBySubCategoryId(1);
        // currentQuestion = allQuestionsAndAnswers[questionIdToDisplay];

        //TEST ADD NEW QUESTION
        // QuestionModel newQuestion = new QuestionModel
        //  {
        //      Id = 0,
        //      Question = "Hej",
        //      SubCategoryId = 1,
        //  };

        //  await questionService.AddQuestionAsync(newQuestion);

        //TEST CALL GET USERS IN ROLE
        // var users = await UserManager.GetUsersInRoleAsync("Admin");

        //TEST ADD NEW SUBCATEGORY
        // SubCategoryModel newSubCategory = new()
        //     {
        //         Name = "New subcategory",
        //         Description = "New subcategory description",
        //         SegmentId = 1
        //     };
        // bool isAdded = await subCategoryService.AddSubCategoryAsync(newSubCategory);

        //TEST REMOVE SUBCATEGORY
        // bool isRemoved = await subCategoryService.RemoveSubCategoryAsync(36);

        //TEST UPDATE SUBCATEGORY
        // List<SubCategoryModel> subCategories = await subCategoryService.GetSubCategoriesBySegmentIdAsync(2);
        // SubCategoryModel subToUpdate = new()
        //     {
        //         Id = subCategories[0].Id,
        //         Name = "Test ändring subkategori",
        //         Description = "Ny beskrivning",
        //         SegmentId = subCategories[0].SegmentId
        //     };

        // bool isUpdated = await subCategoryService.UpdateSubCategoryAsync(subToUpdate);

        //TEST ADD NEW CATEGORY
        // bool isAdded = await categoryService.AddCategoryAsync(new CategoryModel()
        //     {
        //         Name = "Test category",
        //         Description = "N/A"

        //     });

        //TEST REMOVE CATEGORY
        // bool isRemoved = await categoryService.RemoveCategoryAsync(4);

        //TEST UPDATE CATEGORY
        // var categories = await categoryService.GetAllCategoriesAsync();
        // var x = await categoryService.UpdateCategoryAsync(new CategoryModel()
        //     {
        //         Id = categories[0].Id,
        //         Name = "New category name"
        //     });

        //TEST ADD NEW QUESTION
        // var x = await questionService.AddQuestionAsync(new QuestionModel()
        //     {
        //         Question = "How old are you?",
        //         SubCategoryId = 3
        //     });

        //TEST REMOVE QUESTION
        // var y = await questionService.RemoveQuestionAsync(12);

        //TEST UPDATE QUESTION
        // var a = await questionService.GetAllQuestionsBySubCategoryId(1);
        // var z = await questionService.UpdateQuestionAsync(new QuestionModel()
        //    {
        //        Id = a[0].Id,
        //        Question = "How are you doing today????"
        //    });

        //TEST IMPROVED SERVICE CALL FOR SEGMENTS
        // SegmentUserScores = await segmentService.ImprovedGetSegmentsByCategoryIdAsync(1, "3de3f363-9b6f-47e5-b6df-4f43baa4a70d");

        //TEST IMPROVED CALL FOR CATEGORIES
        List<CategoryScoreViewModel> allCategoryScores = await categoryService.GetAllCategoriesWithUserScores("532fdc53-0e3a-4857-a413-455d2d373527");

    }
}
