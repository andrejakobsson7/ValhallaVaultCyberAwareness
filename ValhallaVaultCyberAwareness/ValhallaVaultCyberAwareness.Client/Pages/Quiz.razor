@page "/quiz/{SubCategoryId:int}"

@using ValhallaVaultCyberAwareness.Client.Services
@using ValhallaVaultCyberAwareness.Domain.Models

@inject IQuestionService questionService

@rendermode InteractiveAuto

@if (questions == null)
{
    <p>Loading...</p>
}
else
{
    
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-10">
                <div class="card border-dark text-center">
                    <div class="card-body">
                        <h4>@questions.FirstOrDefault()?.SubCategory</h4>
                        <h5>Question: @($"{ currentQuestionIndex + 1}") / @questions.Count</h5>
                    </div>
                </div>
            </div>
        </div>
        @if (!quizComplete)
        {
            <div class="row justify-content-center mt-5">
                <div class="col-7">
                    <div class="card border-dark text-center">
                        <div class="card-body">
                            <h5 class="card-title">Question: @($"{currentQuestionIndex + 1}")</h5>
                        </div>
                        <div class="card-body">
                            <p>@questions[currentQuestionIndex].Question</p>
                        </div>
                        <div class="card-body">
                            @if (questions.FirstOrDefault()?.Answers.Count(a => !string.IsNullOrEmpty(a.Answer)) == 1 && !answerSubmitted)
                            {
                                <div class="row justify-content-center">
                                    <div class="col-3">
                                        <button class="btn border-dark mx-auto" @onclick="() => AnswerSelected()" disabled="@(answerSubmitted)">Yes</button>
                                    </div>
                                    <div class="col-3">
                                        <button class="btn border-dark mx-auto" @onclick="() => AnswerSelected()" disabled="@(answerSubmitted)">No</button>
                                    </div>
                                </div>
                            }
                            else if (!answerSubmitted)
                            {
                                <div>
                                    @foreach (var answerItem in questions.FirstOrDefault()?.Answers)
                                    {
                                        <div class="mt-1">
                                            <button class="btn border-dark" @onclick="() => AnswerSelected()" disabled="@(answerSubmitted)">@answerItem.Answer</button>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                        <div class="card-body mt-1">
                            <div>
                                @if (!answerSubmitted)
                                {
                                    <button @onclick="SubmitAnswer" disabled="@(!IsAnswerSelected)">Submit Answer</button>
                                }
                            </div>
                            @if (answerSubmitted)
                            {
                                <div>
                                    <p>CORRECT! / INCORRECT!</p>
                                    <p class="mt-1">
                                        Explanation: @questions.FirstOrDefault()?.Explanation
                                    </p>
                                    @if (currentQuestionIndex + 1 != questions.Count)
                                    {
                                        <button @onclick="NextQuestion">Next Question</button>
                                    }
                                    else
                                    {
                                        <button @onclick="CompleteQuiz">Quiz Complete</button>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="justify-content-center mt-5">
                <div class="col-7">
                <div class="card border-dark text-center">
                    <div class="card-body">
                        <h5 class="card-title">Quiz Complete!</h5>
                    </div
                    <div class="card-body mt-2">
                        <h6>Your score:  0 / 0  - 0%</h6>
                        <h6>You've passed! / You failed to pass!</h6>
                    </div>
                    <div class="card-body mt-2">
                        <button>Return to SegmentMenu</button>
                    </div>
                </div>
            </div>
            </div>  
        }
    </div>
    <div class="mt-5">

    </div>
}


@code {
    [Parameter]
    public int SubCategoryId { get; set; }


    private List<QuestionModel>? questions;


    bool IsAnswerSelected { get; set; } = false;
    private int currentQuestionIndex = 0;
    private bool quizComplete = false;
    bool answerSubmitted = false;


    protected override async Task OnInitializedAsync()
    {
        questions = await questionService.GetQuestionsBySubCategoryId(1);
    }
    private async Task AnswerSelected()
    {
        IsAnswerSelected = true;
    }
    private async Task SubmitAnswer()
    {
        answerSubmitted = true;
        IsAnswerSelected = false;
    }
    private async Task NextQuestion()
    {
        answerSubmitted = false;
        currentQuestionIndex++;

        // Check if there are more questions
        if (currentQuestionIndex < questions?.Count)
        {
            StateHasChanged();
        }
        else
        {

        }
    }
    private async Task CompleteQuiz()
    {
        quizComplete = true;
    }
}
