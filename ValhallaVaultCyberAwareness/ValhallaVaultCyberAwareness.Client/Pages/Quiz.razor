@page "/quiz/{SubCategoryId:int}"

@using Microsoft.AspNetCore.Authorization
@using ValhallaVaultCyberAwareness.Client.Services
@using ValhallaVaultCyberAwareness.Client.ViewModels
@using ValhallaVaultCyberAwareness.Domain.Models

@inject IQuestionService questionService 
@inject AuthenticationStateProvider authStateProvider
@inject IUserAnswersService userAnswersService;

@attribute [StreamRendering]
@attribute [Authorize]

@rendermode InteractiveServer

<!-- Check if content has loaded. If it hasn't display "Loading..." -->
@if (questions == null)
{
    <p>Loading...</p>
}
else if(questions.Count == 0)
{
    <p>There is no questions registered in this subcategory.</p>
    <a class="btn btn-primary" href="/Hem">Return to home</a>
}
else
{
    
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-10">
                <div class="card border-dark text-center">
                    <div class="card-body">
                        <!-- 
                            Display which question the user is currently on out of the total
                            {currentQuestionIndex} is an int that tracks how many answers
                            Have been submitted using the {NextQuestion} method
                        -->
                        <h5 id="questionIndex" >Question: @($"{ currentQuestionIndex + 1}") / @questions.Count</h5>
                    </div>
                </div>
            </div>
        </div>
        <!-- 
            Check if the quiz has been completed or if the quiz should be presented
            {quizComplete} is a boolean flipped by {CompleteQuiz} which is used once
            All the questions have been answered
        -->
        @if (!quizComplete)
        {
            <div class="row justify-content-center mt-5">
                <div class="col-7">
                    <div class="card border-dark text-center">
                        <div class="card-body mt-2">

                            <!-- Display the question-text for the user -->
                            <p>@questions[currentQuestionIndex].Question</p>
                        </div>
                        <div class="card-body">
                            <!--
                                Display answers if an answer has not already been submitted one
                                {answerSubmitted} is a bool flipped by {SubmitAnswer}
                            -->
                            @if (!answerSubmitted)
                            {
                                <div>

                                    <!-- Create a button for each answer -->
                                    @foreach (var answerItem in questions[currentQuestionIndex].Answers)
                                    {
                                        <div class="mt-1">

                                            <!-- Display each answer as a button -->
                                            <button class="btn border-dark" @onclick="() => AnswerSelected(answerItem.Id)">@answerItem.Answer</button>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                        <div class="card-body mt-1">
                            <div>
                                <!--
                                    Display a submit button that is disabled if no answer is highlighted
                                    It checks if an answer is hightlighted using the bool {IsAnswerSeleted}
                                    Which is flipped by {AnswerSelected} when a button is clicked

                                    Once the Submit-button is clicked the answer-buttons and the Submit-button
                                    Are both hidden using the bool {answerSubmitted} which is flipped by {SubmitAnswer}
                                -->
                                @if (!answerSubmitted)
                                {
                                    <button @onclick="SubmitAnswer" disabled="@(!IsAnswerSelected)">Submit Answer</button>
                                }
                            </div>
                            <!--
                                When an answer has been submitted display if the answer is correct or not
                                Then present the explanation tied to the question as well as a button to continue
                            -->
                            @if (answerSubmitted)
                            {
                                <div>

                                    <!-- Check if the {Id} of the answer selected matches the {Id} of the correct answer -->
                                    @if (selectedAnswer == questions[currentQuestionIndex].CorrectAnswerId)
                                    {
                                        <h5 class="bg-success text-light">You answered correctly!</h5>

                                        <!-- Send the {Id} and the {userId} to be added to {List<UserAnswers> userAnswers}-->
                                        AddAnswerId(selectedAnswer, userId);

                                        <!-- Increase the count of how many correct answers the user has -->
                                        QuizScoreCount++;
                                    }
                                    else
                                    {
                                        <h5 class="bg-danger text-light">You answered incorrectly!</h5>

                                        <!-- Send the {Id} and the {userId} to be added to {List<UserAnswers> userAnswers}-->
                                        AddAnswerId(selectedAnswer, userId);
                                    }

                                    <!-- Display the answer the user submitted using the {Id} of the selected answer -->
                                    <h5>You answered: @questions[currentQuestionIndex].Answers.FirstOrDefault(a => a.Id == selectedAnswer)?.Answer</h5>
                                    <p class="mt-2">

                                        <!-- Display the explanation tied to the question -->
                                        Explanation: @questions.FirstOrDefault()?.Explanation
                                    </p>
                                    <!--
                                        Check how many questions the user has completed
                                        If the user has completed the same amount of questions as the total
                                        Then the quiz ends and the {quizComplete} bool is flipped by {CompleteQuiz}
                                    -->
                                    @if (currentQuestionIndex + 1 != questions.Count)
                                    {
                                        <button @onclick="NextQuestion">Next Question</button>
                                    }
                                    else
                                    {
                                        <button id="completeQuizBtn" @onclick="CompleteQuiz">Quiz Complete</button>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <!--
                If the quiz has been completed
                Display the score as well as tell the
                User if they passed the quiz
            -->
            <div class="row justify-content-center mt-5">
                <div class="col-7">
                   <div class="card border-dark text-center">
                      <div class="card-body">
                          <h5 class="card-title">Quiz Complete!</h5>
                      </div>
                      <div class="card-body mt-2">
                          <!--
                              Display {QuizScoreCount} to show how many correct answers the user had
                              Display {questions.Count} to show the total amount of questions
                              Calculate the percentage of correct answers to total answers and display it
                          -->
                          <h6>Your score: @QuizScoreCount / @questions.Count - @(Math.Round(((double)QuizScoreCount / questions.Count) * 100, 2))%</h6>

                            <!-- Check if the user scored >= 80% of the total possible score -->
                            @if ((double)QuizScoreCount / questions.Count * 100 >= 80)
                            {
                                <h6>You've passed the quiz!</h6>
                            }
                            else
                            {
                                <h6>You failed to pass the quiz!</h6>
                            }
                      </div>
                      <div class="card-body mt-2">

                            <!-- Button to allow the user to return to the Home Page -->
                            <a class="btn btn-primary" href="/Hem">Return to Home</a>
                        </div>
                   </div>
                </div>
            </div>
        }
    </div>

    <!-- Div used to pad out the bottom of the page -->
    <div class="mt-5">

    </div>
}


@code {
    /* 
       This parameter uses the {SubCategoryId:int} sent through the
       WebAdress to determine which Quiz to present
    */
    [Parameter]
    public int SubCategoryId { get; set; }

    // This string holds the {Id} of the current user
    public string? userId { get; set; }

    /*
        This List holds the questions and related properties
        That are fetched from the Database
    */
    private List<QuestionAnswerViewModel>? questions;

    // This List holds the {AnswerId} and {UserId} to be sent to the Database
    private List<UserAnswers> userAnswers = new();

    // These variables help control the UI and logic of the quiz
    bool IsAnswerSelected { get; set; } = false;
    private int currentQuestionIndex = 0;
    private bool quizComplete = false;
    bool answerSubmitted = false;
    private int selectedAnswer;
    private int QuizScoreCount = 0;

    protected override async Task OnInitializedAsync()
    {
        // Fetch the questions for the quiz based on the {Id} of the selected SubCategory
        questions = await questionService.ImprovedGetQuestionsBySubCategoryId(SubCategoryId);

        // Use the injected {AuthenticationStateProvider} to get the current users {Id}
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        userId = authState.User.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
    }
    private async Task AnswerSelected(int answerId)
    {
        // Save the {Id} of the answer the user selected as an int
        selectedAnswer = answerId;

        IsAnswerSelected = true;
        StateHasChanged();
    }
    private async Task SubmitAnswer()
    {
        answerSubmitted = true;
        IsAnswerSelected = false;
    }
    private async Task AddAnswerId(int answerId, string userId)
    {
        /*
           Add {AnswerId} and {UserId} to {userAnswers} when an answer is submitted
           When the quiz is complete the variables are sent to the Database using {CompleteQuiz}
        */
        userAnswers.Add(new UserAnswers() {AnswerId = answerId, UserId = userId});
    }
    private async Task NextQuestion()
    {
        answerSubmitted = false;

        // Increase the count of the current question after the previous question is completed
        currentQuestionIndex++;

        // Check if there are more questions
        if (currentQuestionIndex < questions?.Count)
        {
            StateHasChanged();
        }
        else
        {

        }
    }
    private async Task CompleteQuiz()
    {
        quizComplete = true;

        // Send the variables in {userAnswers} to the Database in order to be added
        bool isSuccessful = await userAnswersService.AddUserAnswersAsync(userAnswers);
    }
}
