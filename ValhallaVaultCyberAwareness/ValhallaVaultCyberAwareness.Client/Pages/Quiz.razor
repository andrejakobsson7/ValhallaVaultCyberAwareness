@page "/quiz/{SubCategoryId:int}"

@using ValhallaVaultCyberAwareness.Client.Services
@using ValhallaVaultCyberAwareness.Client.ViewModels
@using ValhallaVaultCyberAwareness.Domain.Models

@inject IQuestionService questionService 
@inject AuthenticationStateProvider authStateProvider
@inject IUserAnswersService userAnswersService;


@rendermode InteractiveAuto

@if (questions == null)
{
    <p>Loading...</p>
}
else
{
    
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-10">
                <div class="card border-dark text-center">
                    <div class="card-body">
                        <h5>Question: @($"{ currentQuestionIndex + 1}") / @questions.Count</h5>
                    </div>
                </div>
            </div>
        </div>
        <!-- 
            Check if the quiz has been completed or if the quiz should be presented
        -->
        @if (!quizComplete)
        {
            <div class="row justify-content-center mt-5">
                <div class="col-7">
                    <div class="card border-dark text-center">
                        <div class="card-body mt-2">
                            <p>@questions[currentQuestionIndex].Question</p>
                        </div>
                        <div class="card-body">
                            @if (!answerSubmitted)
                            {
                                <div>
                                    <!--
                                        Create a button for each answer
                                    -->
                                    @foreach (var answerItem in questions[currentQuestionIndex].Answers)
                                    {
                                        <div class="mt-1">
                                            <button class="btn border-dark" @onclick="() => AnswerSelected(answerItem.Id)">@answerItem.Answer</button>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                        <div class="card-body mt-1">
                            <div>
                                <!--
                                    Display a submit button that is disabled if no answer is highlighted
                                -->
                                @if (!answerSubmitted)
                                {
                                    <button @onclick="SubmitAnswer" disabled="@(!IsAnswerSelected)">Submit Answer</button>
                                }
                            </div>
                            <!--
                                When an answer has been submitted correctly
                                Display if the answer is correct as well as an explanation and button to continue
                            -->
                            @if (answerSubmitted)
                            {
                                <div>
                                    @if (selectedAnswer == questions[currentQuestionIndex].CorrectAnswerId)
                                    {
                                        <h5 class="bg-success text-light">You answered correctly!</h5>
                                        AddAnswerId(selectedAnswer, userId);

                                        QuizScoreCount++;
                                    }
                                    else
                                    {
                                        <h5 class="bg-danger text-light">You answered incorrectly!</h5>
                                        AddAnswerId(selectedAnswer, userId);
                                    }
                                    <h5>You answered: @questions[currentQuestionIndex].Answers.FirstOrDefault(a => a.Id == selectedAnswer)?.Answer</h5>
                                    <p class="mt-2">
                                        Explanation: @questions.FirstOrDefault()?.Explanation
                                    </p>
                                    @if (currentQuestionIndex + 1 != questions.Count)
                                    {
                                        <button @onclick="NextQuestion">Next Question</button>
                                    }
                                    else
                                    {
                                        <button @onclick="CompleteQuiz">Quiz Complete</button>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="row justify-content-center mt-5">
                <div class="col-7">
                   <div class="card border-dark text-center">
                      <div class="card-body">
                          <h5 class="card-title">Quiz Complete!</h5>
                      </div>
                      <div class="card-body mt-2">
                          <h6>Your score: @QuizScoreCount / @questions.Count - @(Math.Round(((double)QuizScoreCount / questions.Count) * 100, 2))%</h6>
                            @if ((double)QuizScoreCount / questions.Count * 100 >= 80)
                            {
                                <h6>You've passed the quiz!</h6>
                            }
                            else
                            {
                                <h6>You failed to pass the quiz!</h6>
                            }
                      </div>
                      <div class="card-body mt-2">
                            <button onclick="window.location.href = 'https://localhost:7107/CategoryPage'">Return to Category Menu</button>
                        </div>
                   </div>
                </div>
            </div>
        }
    </div>
    <div class="mt-5">

    </div>
}


@code {
    [Parameter]
    public int SubCategoryId { get; set; }

    public string? userId { get; set; }

    private List<QuestionAnswerViewModel>? questions;

    // Holds the answers from user
    private List<UserAnswers> userAnswers = new();


    bool IsAnswerSelected { get; set; } = false;
    private int currentQuestionIndex = 0;
    private bool quizComplete = false;
    bool answerSubmitted = false;
    private int selectedAnswer;
    private int QuizScoreCount = 0;

    protected override async Task OnInitializedAsync()
    {
        questions = await questionService.ImprovedGetQuestionsBySubCategoryId(SubCategoryId);
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        userId = authState.User.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
    }
    private async Task AnswerSelected(int answerId)
    {
        selectedAnswer = answerId;
        IsAnswerSelected = true;
        StateHasChanged(); // Ensure the UI updates after setting the property
    }
    private async Task SubmitAnswer()
    {
        answerSubmitted = true;
        IsAnswerSelected = false;
    }
    private async Task AddAnswerId(int answerId, string userId)
    {
        userAnswers.Add(new UserAnswers() {AnswerId = answerId, UserId = userId});
    }
    private async Task NextQuestion()
    {
        answerSubmitted = false;
        currentQuestionIndex++;

        // Check if there are more questions
        if (currentQuestionIndex < questions?.Count)
        {
            StateHasChanged();
        }
        else
        {

        }
    }
    private async Task CompleteQuiz()
    {
        quizComplete = true;
        bool isSuccessful = await userAnswersService.AddUserAnswersAsync(userAnswers);
    }
}
