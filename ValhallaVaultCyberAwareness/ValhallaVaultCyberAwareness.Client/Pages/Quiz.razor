@page "/quiz/{SubCategoryId:int}"

@using ValhallaVaultCyberAwareness.Client.Services
@using ValhallaVaultCyberAwareness.Domain.Models

@inject IQuestionService questionService

@rendermode InteractiveAuto

@if (questions == null)
{
    <p>Loading...</p>
}
else
{
    
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-10">
                <div class="card border-dark text-center">
                    <div class="card-body">
                        <h4>@questions.FirstOrDefault()?.SubCategory</h4>
                        <h5>Question: @($"{ currentQuestionIndex + 1}") / @questions.Count</h5>
                    </div>
                </div>
            </div>
        </div>
        <div class="row justify-content-center mt-5">
            <div class="col-7">
                <div class="card border-dark text-center">
                    <div class="card-body">
                        <h5 class="card-title">Question: @($"{currentQuestionIndex + 1}")</h5>
                    </div>
                    <div class="card-body">
                        <p>@questions[currentQuestionIndex].Question</p>
                    </div>
                    <div class="card-body">
                        @if (questions.FirstOrDefault()?.Answers.Count(a => !string.IsNullOrEmpty(a.Answer)) == 1)
                        {
                            <div class="row justify-content-center">
                                <div class="col-3">
                                    <button class="btn border-dark mx-auto">Yes</button>
                                </div>
                                <div class="col-3">
                                    <button class="btn border-dark mx-auto">No</button>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div>
                                @foreach (var answerItem in questions.FirstOrDefault()?.Answers)
                                {
                                    <div class="mt-1">
                                        <button class="btn border-dark">@answerItem.Answer</button>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                    <div class="card-body mt-1">
                        <div>
                            <button @onclick="SubmitAnswer">Submit Answer</button>
                        </div>
                        <div class="mt-2">
                            <p>CORRECT! / INCORRECT!</p>
                            <p class="mt-1">
                                Explanation: @questions.FirstOrDefault()?.Explanation
                            </p>
                            <button @onclick="NextQuestion">Next Question</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="mt-5">

    </div>
}

@code {
    [Parameter]
    public int SubCategoryId { get; set; }


    private List<QuestionModel>? questions;

    private int currentQuestionIndex = 0;



    protected override async Task OnInitializedAsync()
    {
        questions = await questionService.GetQuestionsBySubCategoryId(1);
    }
    /*/
    private List<QuestionModel> GetDummyData()
    {
        var dummyData = new List<QuestionModel>();

        for (int i = 1; i <= 5; i++)
        {
            var question = new QuestionModel
                {
                    QuestionText = $"Question {i}",
                    Answers = GetDummyAnswers()
                };

            dummyData.Add(question);
        }

        return dummyData;
    }
    */
    private async Task SubmitAnswer()
    {
        
    }
    private async Task NextQuestion()
    {
        currentQuestionIndex++;

        // Check if there are more questions
        if (currentQuestionIndex < questions?.Count)
        {
            StateHasChanged();
        }
        else
        {
            
        }
    }
    /*
      
     
    private List<AnswerModel> GetDummyAnswers()
        {
        var dummyAnswers = new List<AnswerModel>();

        // Generating between 1 to 3 dummy answers for each question
        var numAnswers = new Random().Next(0, 2) * 2 + 1;
        for (int i = 1; i <= numAnswers; i++)
            {
            var answer = new AnswerModel
                    {
                    AnswerText = $"Answer {i}"
            };

            dummyAnswers.Add(answer);
        }

        return dummyAnswers;
    }
    public class QuestionModel
        {
        public string? QuestionText { get; set; }
        public List<AnswerModel> Answers { get; set; } = new List<AnswerModel>();
    }
    public class AnswerModel
        {
        public string? AnswerText { get; set; }
    }
    */
}
